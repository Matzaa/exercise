{"version":3,"sources":["card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","today","Date","convert","mydate","mynewDate","diffTime","Math","abs","diffDays","ceil","console","log","old","date","newbie","recent","className","app","version","tenant","environment","App","useState","allData","setAlldata","setTenant","setEnvironment","useEffect","myData","deployed_at","onChange","e","target","value","name","id","onClick","filtered","filter","el","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ead966d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n    const today = new Date();\n\n    function convert(mydate) {\n        let mynewDate = new Date(mydate);\n        const diffTime = Math.abs(today - mynewDate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        console.log(diffDays);\n        return diffDays;\n    }\n\n    const old = convert(props.date) > 60 && \"old card\";\n    const newbie = convert(props.date) <= 14 && \"newbie card\";\n    const recent =\n        convert(props.date) < 60 && convert(props.date) > 14 && \"recent card\";\n\n    return (\n        <div className={`list-group-item ${old} ${recent} ${newbie} `}>\n            <h1>{props.app}</h1>\n            <h2>{props.date}</h2>\n            <h2>{props.version}</h2>\n            <h2>{props.tenant}</h2>\n            <h2>{props.environment}</h2>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./card\";\n\nimport \"./App.css\";\n\nfunction App() {\n    const [allData, setAlldata] = useState([]);\n    const [tenant, setTenant] = useState(\"otherCustomer\");\n    const [environment, setEnvironment] = useState(\"prod\");\n\n    useEffect(() => {\n        setAlldata(myData);\n    }, []);\n    console.log(\"allD\", allData);\n\n    const myData = [\n        {\n            app: \"Frontend\",\n            version: \"2.01\",\n            tenant: \"keylight\",\n            environment: \"prod\",\n            deployed_at: \"2020-08-01\",\n        },\n        {\n            app: \"Backend\",\n            version: \"2.04\",\n            tenant: \"keylight\",\n            environment: \"prod\",\n            deployed_at: \"2020-06-01\",\n        },\n        {\n            app: \"Frontend\",\n            version: \"2.08\",\n            tenant: \"keylight\",\n            environment: \"sandbox\",\n            deployed_at: \"2020-09-01\",\n        },\n        {\n            app: \"Backend\",\n            version: \"2.08\",\n            tenant: \"keylight\",\n            environment: \"sandbox\",\n            deployed_at: \"2020-09-20\",\n        },\n        {\n            app: \"Frontend\",\n            version: \"2.02\",\n            tenant: \"otherCustomer\",\n            environment: \"prod\",\n            deployed_at: \"2020-09-01\",\n        },\n        {\n            app: \"Backend\",\n            version: \"2.09\",\n            tenant: \"otherCustomer\",\n            environment: \"prod\",\n            deployed_at: \"2020-07-11\",\n        },\n        {\n            app: \"Frontend\",\n            version: \"2.07\",\n            tenant: \"otherCustomer\",\n            environment: \"sandbox\",\n            deployed_at: \"2020-09-11\",\n        },\n        {\n            app: \"Frontend\",\n            version: \"2.09\",\n            tenant: \"otherCustomer\",\n            environment: \"sandbox\",\n            deployed_at: \"2020-09-11\",\n        },\n    ];\n\n    const changeFilter = (e) => {\n        setTenant(e.target.value);\n        console.log(\"change filt\", tenant);\n    };\n\n    const changeEnvFilter = (e) => {\n        setEnvironment(e.target.value);\n    };\n\n    const filter = () => {\n        let filtered = myData.filter((el) => el.tenant === tenant);\n        setAlldata(filtered);\n    };\n    const envFilter = () => {\n        let filtered = myData.filter((el) => el.environment === environment);\n        setAlldata(filtered);\n    };\n\n    return (\n        <div>\n            <div className=\"head\">\n                <div className=\"filter\">\n                    <h1>Filter apps</h1>\n                    <div>\n                        <select onChange={changeFilter} name=\"\" id=\"\">\n                            <option value=\"otherCustomer\">otherCustomer</option>\n                            <option value=\"keylight\">keylight</option>\n                        </select>\n                        <button onClick={filter}>filter tenant</button>\n                    </div>\n                    <div>\n                        <select onChange={changeEnvFilter} name=\"\" id=\"\">\n                            <option value=\"prod\">prod</option>\n                            <option value=\"sandbox\">sandbox</option>\n                        </select>\n                        <button onClick={envFilter}>filter environment</button>\n                    </div>\n                </div>\n                <div className=\"filter\">\n                    <div className=\"yellow\">\n                        <div className=\"circle\"></div>\n                        <h3>deployed in the last 14 days</h3>\n                    </div>\n                    <div className=\"red\">\n                        <div className=\"circle\"></div>\n                        <h3>deployed longer than 14 days ago </h3>\n                    </div>\n                    <div className=\"gray\">\n                        <div className=\"circle\"></div>\n                        <h3>deployed longer than 60 days ago </h3>\n                    </div>\n                </div>\n            </div>\n            <div className=\"App\">\n                {allData.map((item) => (\n                    <Card\n                        app={item.app}\n                        version={item.version}\n                        tenant={item.tenant}\n                        environment={item.environment}\n                        date={item.deployed_at}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}